// Generated by gir (https://github.com/gtk-rs/gir @ f64f90a)
// from girs (@ 520ff74)
// DO NOT EDIT

use glib::object::IsA;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "AtspiCollection")]
    pub struct Collection(Interface<ffi::AtspiCollection>);

    match fn {
        type_ => || ffi::atspi_collection_get_type(),
    }
}

pub const NONE_COLLECTION: Option<&Collection> = None;

pub trait CollectionExt: 'static {
    //#[doc(alias = "atspi_collection_get_active_descendant")]
    //#[doc(alias = "get_active_descendant")]
    //fn active_descendant(&self) -> Result</*Ignored*/Accessible, glib::Error>;

    //#[doc(alias = "atspi_collection_get_matches")]
    //#[doc(alias = "get_matches")]
    //fn matches<P: IsA<MatchRule>>(&self, rule: &P, sortby: CollectionSortOrder, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error>;

    //#[doc(alias = "atspi_collection_get_matches_from")]
    //#[doc(alias = "get_matches_from")]
    //fn matches_from<P: IsA<MatchRule>>(&self, current_object: /*Ignored*/&Accessible, rule: &P, sortby: CollectionSortOrder, tree: CollectionTreeTraversalType, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error>;

    //#[doc(alias = "atspi_collection_get_matches_to")]
    //#[doc(alias = "get_matches_to")]
    //fn matches_to<P: IsA<MatchRule>>(&self, current_object: /*Ignored*/&Accessible, rule: &P, sortby: CollectionSortOrder, tree: CollectionTreeTraversalType, limit_scope: bool, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error>;

    //#[doc(alias = "atspi_collection_is_ancestor_of")]
    //fn is_ancestor_of(&self, test: /*Ignored*/&Accessible) -> Result<(), glib::Error>;
}

impl<O: IsA<Collection>> CollectionExt for O {
    //fn active_descendant(&self) -> Result</*Ignored*/Accessible, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_collection_get_active_descendant() }
    //}

    //fn matches<P: IsA<MatchRule>>(&self, rule: &P, sortby: CollectionSortOrder, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_collection_get_matches() }
    //}

    //fn matches_from<P: IsA<MatchRule>>(&self, current_object: /*Ignored*/&Accessible, rule: &P, sortby: CollectionSortOrder, tree: CollectionTreeTraversalType, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_collection_get_matches_from() }
    //}

    //fn matches_to<P: IsA<MatchRule>>(&self, current_object: /*Ignored*/&Accessible, rule: &P, sortby: CollectionSortOrder, tree: CollectionTreeTraversalType, limit_scope: bool, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_collection_get_matches_to() }
    //}

    //fn is_ancestor_of(&self, test: /*Ignored*/&Accessible) -> Result<(), glib::Error> {
    //    unsafe { TODO: call ffi:atspi_collection_is_ancestor_of() }
    //}
}

impl fmt::Display for Collection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Collection")
    }
}
