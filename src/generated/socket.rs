//! # DBus interface proxy for: `org.a11y.atspi.Socket`
//!
//! This code was generated by `zbus-xmlgen` `1.0.0` from DBus introspection data.
//! Source: `Socket.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://zeenix.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.a11y.atspi.Socket")]
trait Socket {
    /// Embed method
    fn embed(
        &self,
        plug: &(&str, zvariant::ObjectPath),
    ) -> zbus::Result<(String, zvariant::OwnedObjectPath)>;

    /// Unembed method
    fn unembed(&self, plug: &(&str, zvariant::ObjectPath)) -> zbus::Result<()>;

    /// Available signal
    #[dbus_proxy(signal)]
    fn available(&self, socket: &(&str, zvariant::ObjectPath)) -> zbus::Result<()>;
}
