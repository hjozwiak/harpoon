use crossroads::IfaceBuilder;
// This code was autogenerated with `dbus-codegen-rust -rn`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait OrgFreedesktopDBusProperties {
    fn get(
        &mut self,
        interface_name: String,
        property_name: String,
    ) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::MethodErr>;
    fn get_all(&mut self, interface_name: String) -> Result<arg::PropMap, dbus::MethodErr>;
    fn set(
        &mut self,
        interface_name: String,
        property_name: String,
        value: arg::Variant<Box<dyn arg::RefArg + 'static>>,
    ) -> Result<(), dbus::MethodErr>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub const ORG_FREEDESKTOP_DBUS_PROPERTIES_NAME: &str = "org.freedesktop.DBus.Properties";

pub fn register_org_freedesktop_dbus_properties<T>(
    cr: &mut crossroads::Crossroads,
) -> crossroads::IfaceToken<T>
where
    T: OrgFreedesktopDBusProperties + Send + 'static,
{
    cr.register("org.freedesktop.DBus.Properties", |b| {
        b.signal::<(String, arg::PropMap, Vec<String>), _>(
            "PropertiesChanged",
            (
                "interface_name",
                "changed_properties",
                "invalidated_properties",
            ),
        );
        b.method(
            "Get",
            ("interface_name", "property_name"),
            ("value",),
            |_, t: &mut T, (interface_name, property_name)| {
                t.get(interface_name, property_name).map(|x| (x,))
            },
        );
        b.method(
            "GetAll",
            ("interface_name",),
            ("properties",),
            |_, t: &mut T, (interface_name,)| t.get_all(interface_name).map(|x| (x,)),
        );
        b.method(
            "Set",
            ("interface_name", "property_name", "value"),
            (),
            |_, t: &mut T, (interface_name, property_name, value)| {
                t.set(interface_name, property_name, value)
            },
        );
    })
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&mut self) -> Result<String, dbus::MethodErr>;
}

pub const ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_NAME: &str = "org.freedesktop.DBus.Introspectable";

pub fn register_org_freedesktop_dbus_introspectable<T>(
    cr: &mut crossroads::Crossroads,
) -> crossroads::IfaceToken<T>
where
    T: OrgFreedesktopDBusIntrospectable + Send + 'static,
{
    cr.register("org.freedesktop.DBus.Introspectable", |b| {
        b.method("Introspect", (), ("xml_data",), |_, t: &mut T, ()| {
            t.introspect().map(|x| (x,))
        });
    })
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&mut self) -> Result<(), dbus::MethodErr>;
    fn get_machine_id(&mut self) -> Result<String, dbus::MethodErr>;
}

pub const ORG_FREEDESKTOP_DBUS_PEER_NAME: &str = "org.freedesktop.DBus.Peer";

pub fn register_org_freedesktop_dbus_peer<T>(
    cr: &mut crossroads::Crossroads,
) -> crossroads::IfaceToken<T>
where
    T: OrgFreedesktopDBusPeer + Send + 'static,
{
    cr.register("org.freedesktop.DBus.Peer", |b| {
        b.method("Ping", (), (), |_, t: &mut T, ()| t.ping());
        b.method("GetMachineId", (), ("machine_uuid",), |_, t: &mut T, ()| {
            t.get_machine_id().map(|x| (x,))
        });
    })
}

pub trait OrgA11yStatus {
    fn is_enabled(&self) -> Result<bool, dbus::MethodErr>;
    fn set_is_enabled(&self, value: bool) -> Result<(), dbus::MethodErr>;
    fn screen_reader_enabled(&self) -> Result<bool, dbus::MethodErr>;
    fn set_screen_reader_enabled(&self, value: bool) -> Result<(), dbus::MethodErr>;
}

pub const ORG_A11Y_STATUS_NAME: &str = "org.a11y.Status";

#[derive(Copy, Clone, Debug)]
pub struct OrgA11yStatusProperties<'a>(pub &'a arg::PropMap);

impl<'a> OrgA11yStatusProperties<'a> {
    pub fn from_interfaces(
        interfaces: &'a ::std::collections::HashMap<String, arg::PropMap>,
    ) -> Option<Self> {
        interfaces.get("org.a11y.Status").map(Self)
    }

    pub fn is_enabled(&self) -> Option<bool> {
        arg::prop_cast(self.0, "IsEnabled").copied()
    }

    pub fn screen_reader_enabled(&self) -> Option<bool> {
        arg::prop_cast(self.0, "ScreenReaderEnabled").copied()
    }
}

pub fn register_org_a11y_status<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where
    T: OrgA11yStatus + Send + 'static,
{
    cr.register("org.a11y.Status", |b: &mut IfaceBuilder<T>| {
        b.property::<bool, _>("IsEnabled")
            .get(|_, t| t.is_enabled())
            .set(|_, t, value| t.set_is_enabled(value).map(|_| None));
        b.property::<bool, _>("ScreenReaderEnabled")
            .get(|_, t| t.screen_reader_enabled())
            .set(|_, t, value| t.set_screen_reader_enabled(value).map(|_| None));
    })
}

pub trait OrgA11yBus {
    fn get_address(&mut self) -> Result<String, dbus::MethodErr>;
}

pub const ORG_A11Y_BUS_NAME: &str = "org.a11y.Bus";

pub fn register_org_a11y_bus<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where
    T: OrgA11yBus + Send + 'static,
{
    cr.register("org.a11y.Bus", |b| {
        b.method("GetAddress", (), ("address",), |_, t: &mut T, ()| {
            t.get_address().map(|x| (x,))
        });
    })
}
